/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/Dialog/dialog.ts
var import_obsidian = require("obsidian");
var ExampleModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h6", { text: "\u60A8\u7684\u60F3\u6CD5\u662F\uFF1F" });
    const stylingTemplateSetting = new import_obsidian.Setting(contentEl);
    const stylingTemplateContent = new import_obsidian.TextAreaComponent(stylingTemplateSetting.controlEl);
    stylingTemplateSetting.settingEl.setAttribute("style", "display: grid; grid-template-columns: 1fr;");
    stylingTemplateContent.inputEl.setAttribute("style", "width: 100%;  height: 18vh;");
    stylingTemplateContent.onChange((value) => __async(this, null, function* () {
      this.result = value.replace(/\n/g, "<br>");
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("\u786E\u5B9A").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/Plugin/EditorExtension.ts
var import_view = require("@codemirror/view");
var import_obsidian2 = require("obsidian");
var label = "View notes";
var addSrcButton = (app, plugin) => {
  const apply = () => app.workspace.iterateAllLeaves(addButton(app, plugin));
  app.workspace.onLayoutReady(apply);
  app.workspace.on("layout-change", apply);
};
var addButton = (app, plugin) => (leaf) => {
  if (leaf.view instanceof import_obsidian2.MarkdownView && leaf.view.containerEl.querySelector(
    `a.view-action[aria-label="${label}"]`
  ) === null) {
    let view = leaf.view;
    let isWork = false;
    const buttonElement = view.addAction("pdf-file", label, (evt) => {
      const rightGutters = view.contentEl.querySelector("#right-gutters");
      if (isWork) {
        isWork = false;
        rightGutters.setAttribute("style", "display:block");
        rightGutters.setAttribute("style", `background-color:${plugin.settings.backgroundColor}!important;width:${plugin.settings.width}px;margin-right: 30px`);
        (0, import_obsidian2.setIcon)(buttonElement, "pdf-file");
      } else {
        isWork = true;
        rightGutters.setAttribute("style", "display:none");
        (0, import_obsidian2.setIcon)(buttonElement, "add-note-glyph");
      }
    });
  }
};
function EditingViewPlugin(app, plugin) {
  return import_view.ViewPlugin.fromClass(
    class ExamplePlugin {
      constructor(view) {
        this.prevViewport = view.viewport;
        this.dom = document.createElement("div");
        this.dom.className = "cm-gutters";
        this.dom.setAttribute("style", `background-color:${plugin.settings.backgroundColor}!important;width:${plugin.settings.width}px;margin-right: 30px`);
        this.dom.setAttribute("id", "right-gutters");
        this.dom.style.minHeight = view.contentHeight + "px";
        view.scrollDOM.insertAfter(this.dom, view.contentDOM.nextSibling);
        addSrcButton(app, plugin);
      }
      setCommnet(view) {
        const _get_gutter = view.dom.querySelector("#right-gutters");
        if (_get_gutter) {
          _get_gutter.empty();
          const findComment = view.contentDOM.querySelectorAll(".comment");
          if (findComment.length === 0) {
            const findStyle = view.contentDOM.querySelectorAll(".cm-line");
            findStyle.forEach(($el) => {
              let getStyles = $el.getAttribute("style");
              if (getStyles) {
                if (getStyles.endsWith("top:0px")) {
                  $el.removeAttribute("style");
                }
                ;
              }
            });
          }
          findComment.forEach((element) => {
            if (element) {
              const comments = document.createElement("div");
              comments.style.top = element.parentElement.parentElement.parentElement.offsetTop + "px";
              comments.addClass("rightComments");
              comments.innerHTML = element.innerHTML;
              _get_gutter.append(comments);
              comments.onclick = (e) => {
                comments.setAttribute("contenteditable", "plaintext-only");
                comments.style.cursor = "text";
                comments.style.border = "1px solid #00f";
              };
              comments.onblur = (e) => {
                const node = view.contentDOM.querySelector("#" + element.getAttribute("id"));
                const newText = e.target.innerText;
                const { state } = view;
                const position = view.posAtDOM(node);
                const line = state.doc.lineAt(position);
                const Exp = RegExp("(" + element.getAttribute("id") + "'>)([\\s\\S]*?)(</span>)", "g");
                const test = line.text.replace(Exp, "$1" + newText + "$3");
                view.dispatch({ changes: { from: line.from, to: line.to, insert: test.replace(/\n/g, "<br>") } });
              };
              if (comments.offsetHeight + 5 >= element.parentElement.parentElement.parentElement.offsetHeight) {
                element.parentElement.parentElement.parentElement.setAttribute("style", `height:${comments.offsetHeight + 5}px;top:0px`);
              } else {
                element.parentElement.parentElement.parentElement.removeAttribute("style");
              }
            }
          });
        }
      }
      update(update) {
        this.dom.style.minHeight = update.view.contentHeight + "px";
        this.setCommnet(update.view);
      }
      destroy() {
        this.dom.remove();
      }
    }
  );
}

// src/Plugin/settings.ts
var import_obsidian3 = require("obsidian");
var ExampleSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("\u5BBD\u5EA6").setDesc("\u7B14\u8BB0\u533A\u5BBD\u5EA6").addText(
      (text) => text.setPlaceholder("250").setValue(this.plugin.settings.width).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.width = value;
        yield this.plugin.saveSettings();
      }))
    );
    new import_obsidian3.Setting(containerEl).setName("\u80CC\u666F\u8272").setDesc("\u7B14\u8BB0\u533A\u80CC\u666F\u8272").addText(
      (text) => text.setPlaceholder("rgb(246, 248, 250)").setValue(this.plugin.settings.backgroundColor).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.backgroundColor = value;
        yield this.plugin.saveSettings();
      }))
    );
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  width: "250",
  backgroundColor: "rgb(246, 248, 250)"
};
var MyPlugin = class extends import_obsidian4.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new ExampleSettingTab(this.app, this));
      this.registerEditorExtension(EditingViewPlugin(this.app, this));
      this.registerEvent(
        this.app.workspace.on("editor-menu", (menu, editor, view) => {
          menu.addItem((item) => {
            item.setTitle("\u63D2\u5165\u6CE8\u91CA \u{1F448}").setIcon("document").onClick(() => __async(this, null, function* () {
              new ExampleModal(this.app, (result) => {
                const id = Math.random().toString(36).slice(2);
                editor.replaceSelection(`<span class='comment-box'><span>\u{1F4DD}</span><span class="comment" style="display:none;"  id='comment-id-${id}'>${result}</span></span>`);
              }).open();
            }));
          });
        })
      );
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
